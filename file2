#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define MAX 100

char stack[MAX];
int top = -1;


int is_empty() {
    return top == -1;
}


void push(char c) {
    if (top < MAX - 1) {
        stack[++top] = c;
    } else {
        printf("Stack overflow\n");
    }
}


char pop() {
    if (!is_empty()) {
        return stack[top--];
    } else {
        printf("Stack underflow\n");
        return '\0';
    }
}


char peek() {
    if (!is_empty()) {
        return stack[top];
    }
    return '\0';
}


int precedence(char c) {
    if (c == '^') return 3;
    if (c == '*' || c == '/') return 2;
    if (c == '+' || c == '-') return 1;
    return 0;
}


void infix_to_postfix(const char* infix, char* postfix) {
    int i = 0, j = 0;

    while (infix[i] != '\0') {
        char c = infix[i];

        if (isalnum(c)) {

            postfix[j++] = c;
        } else if (c == '(') {

            push(c);
        } else if (c == ')') {

            while (!is_empty() && peek() != '(') {
                postfix[j++] = pop();
            }
            pop();
        } else {

            while (!is_empty() && precedence(peek()) >= precedence(c)) {
                postfix[j++] = pop();
            }
            push(c);
        }
        i++;
    }


    while (!is_empty()) {
        postfix[j++] = pop();
    }

    postfix[j] = '\0';
}

int main() {
    char infix[MAX];
    char postfix[MAX];

    printf("Enter an infix expression: ");
    scanf("%s", infix);

    infix_to_postfix(infix, postfix);

    printf("Postfix expression: %s\n", postfix);

    return 0;
}

